[buildout]
parts = eggs
    pkgversions
    fix-perm
    activate
    modwsgi_tiles
#    modwsgi_wms
    tilegeneration-config
    apache-config
develop = .
    OGCServer
    tilecloud
    tilecloud-chain
newest = false
prefer-final = true
index = http://pypi.camptocamp.net/pypi
allow-hosts = pypi.camptocamp.net

extensions = buildout.dumppickedversions
versions = versions

develop-eggs-directory = buildout/develop-eggs
eggs-directory = buildout/eggs
parts-directory = buildout/parts
bin-directory = buildout/bin

[eggs]
recipe = z3c.recipe.scripts
eggs = osm-render
dependent-scripts = true
interpreter = python

[activate]
recipe = evg.recipe.activate

[versions]
tilecloud-chain =
tilecloud =

Chameleon = 2.12
Jinja2 = 2.7.1
PasteDeploy = 1.5.0
PyYAML = 3.10
Shapely = 1.2.18
bottle = 0.11.6
c2c.recipe.pkgversions = 0.2
collective.recipe.cmd = 0.6
distribute = 0.6.49
evg.recipe.activate = 0.5
psycopg2 = 2.5.1
pyproj = 1.9.3
pyramid = 1.4.5
translationstring = 1.1
venusian = 1.0a8
z3c.recipe.scripts = 1.0.1
zc.recipe.egg = 1.3.2
zope.deprecation = 4.0.2
PIL = 1.1.7
Paste = 1.7.5.1
PasteScript = 1.7.5
collective.recipe.modwsgi = 2.0

[pkgversions]
recipe = c2c.recipe.pkgversions
python-mapnik = 2.1
osm2pgsql =
postgis = 1.5.3
python = 2.7
osmosis =
#mapcacke = 1.0.0
libboost-python-dev =
mapnik-utils =
libmapnik-dev =

[vars]
PBF_BASE_URL = http://download.geofabrik.de/europe/
PBF_FILE = alps-latest.osm.pbf
WORKDIR_OSM = ${buildout:directory}/update
TMP_FOLDER = /tmp
PG_POSTGIS = "/usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql"
PG_SPATIAL_REF = "/usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql"
TMPL_NAME = template_postgis

[help]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
	grep '^\[' buildout.cfg

[fix-perm]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> if sys.platform.startswith('linux'):
    >>>   from subprocess import call, Popen, PIPE
    >>>   dirs = Popen(['find', '..', '-type', 'd'], stdout=PIPE).communicate()[0]
    >>>   for d in [d for d in dirs.split('\n') if len(d) > 0]:
    >>>     call(['chmod', '--quiet', 'g+s', d])
    >>>   call(['chmod', '--quiet', '-R', 'g+rw,o+r', '..'])

[apache-config]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
#  ./buildout/bin/generate_controller --generate-mapcache-config
  ./buildout/bin/generate_controller --generate-apache-config
uninstall_cmds =
#  rm apache/mapcache.xml
  rm apache/tiles.conf.in

[tilegeneration-config]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> from subprocess import call
    >>> from os.path import join
    >>> cmd = join('buildout', 'bin', 'generate_configs')
    >>> call([cmd])
uninstall_cmds =
    >>> import os
    >>> from os.path import join
    >>> os.remove(join('tilegeneration', 'config.yaml'))
    >>> os.remove(join('tilegeneration', 'config-update.yaml'))

[modwsgi_tiles]
recipe = collective.recipe.modwsgi
eggs = osm-render
config-file = ${buildout:directory}/production.ini
app_name = tiles

[modwsgi_wms]
recipe = collective.recipe.modwsgi
eggs = ogcserver
config-file = ${buildout:directory}/production.ini
app_name = wms

#[millstone] downloading: 'http://mapbox-geodata.s3.amazonaws.com/natural-earth-1.3.0/physical/10m-land.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/osm/coastline-good.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/osm/shoreline_300.zip'
#[millstone] downloading: 'http://mapbox-geodata.s3.amazonaws.com/natural-earth-1.4.0/cultural/10m-populated-places-simple.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/world_borders_merc.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/natural-earth-10m-1.3.0/admin_0_boundary_lines_land.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/natural-earth-10m-1.3.0/lakes.zip'
#[millstone] downloading: 'http://tilemill-data.s3.amazonaws.com/natural-earth-10m-1.3.0/admin_1_states_provinces_lines_shp.zip'

[init-mapnik.xml]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    npm install cartocc
    npm install carto
    npm install millstone

    cd osm
    if [ ! -e data ]; then
        ./get-shapefiles.sh
    fi
    nodejs ../node_modules/carto/bin/carto project.mml > mapnik.xml
    cd -

    cd hotosm
    mkdir -p /home/$USER/Documents/MapBox/project
    ln -s `pwd` /home/$USER/Documents/MapBox/project/hdm
    cp ../hot.json cartocc.json
    nodejs ../node_modules/cartocc/bin/cartocc hdm
    nodejs ../node_modules/carto/bin/carto project.mml > mapnik.xml
    sed -i 's/DejaVu Sans Italic/DejaVu Sans Oblique/g' mapnik.xml
    sed -i 's/DejaVu Sans Bold Italic/DejaVu Sans Bold Oblique/g' mapnik.xml
    cd -

    cd mapbox-bright
    cp ../mapbox-bright.py configure.py
    ./make.py
    cp -r /home/$USER/Documents/MapBox/project/OSMBright/ ..
    cd ../OSMBright
    nodejs ../node_modules/carto/bin/carto project.mml > mapnik.xml
    sed -i 's/DejaVu Sans Italic/DejaVu Sans Oblique/g' mapnik.xml
    sed -i 's/DejaVu Sans Bold Italic/DejaVu Sans Bold Oblique/g' mapnik.xml
    cd ..

    cd mapbox-streets/open-streets/layers
    if [ ! -e processed_p.shp ]; then
        wget http://tilemill-data.s3.amazonaws.com/osm/processed_p.zip
        unzip processed_p.zip
    fi
    if [ ! -e shoreline_300.shp ]; then
        wget http://tilemill-data.s3.amazonaws.com/osm/shoreline_300.zip
        unzip shoreline_300.zip
    fi
    cd ../..
    cp ../mapbox-streets.py configure.py
    ./configure.py
    cd open-streets/
    nodejs ../../node_modules/carto/bin/carto project.mml > mapnik.xml
    cd ../..

#    cd mapbox/dc-nightvision
#    nodejs ../../node_modules/carto/bin/carto dc-nightvision.mml > mapnik.xml
#    cd ../..

[save-mapnik.xml]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    cp ./osm/mapnik.xml osm.xml
    cp ./hotosm/mapnik.xml hotosm.xml
    cp OSMBright/mapnik.xml mapbox-bright.xml
    cp ./mapbox-streets/open-streets/mapnik.xml mapbox-streets.xml

[use-mapnik.xml]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    cp osm.xml ./osm/mapnik.xml
    cp hotosm.xml ./hotosm/mapnik.xml
    cp mapbox-bright.xml OSMBright/mapnik.xml
    rmdir OSMBright/layers/land/
    ln -s `pwd`/OSMBright/cache/ae26f3ca-10m-land OSMBright/layers/land
    cp mapbox-streets.xml ./mapbox-streets/open-streets/mapnik.xml
    mkdir -p mapbox-streets/open-streets/layers/world
    ln -s `pwd`/mapbox-streets/open-streets/cache/*/* mapbox-streets/open-streets/layers/world/
    rmdir mapbox-streets/open-streets/layers/ne-lakes
    ln -s `pwd`/mapbox-streets/open-streets/cache/77e50cb0-lakes mapbox-streets/open-streets/layers/ne-lakes
    rmdir mapbox-streets/open-streets/layers/ne-admin-1
    ln -s `pwd`/mapbox-streets/open-streets/cache/60bcb61f-admin_1_states_provinces_lines_shp mapbox-streets/open-streets/layers/ne-admin-1
    rmdir mapbox-streets/open-streets/layers/ne-admin-0
    ln -s `pwd`/mapbox-streets/open-streets/cache/491a515b-admin_0_boundary_lines_land mapbox-streets/open-streets/layers/ne-admin-0
 
[template_postgis]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    sudo -u postgres dropdb "${vars:TMPL_NAME}"
    cat << EOF | sudo -u postgres psql -q
    CREATE DATABASE ${vars:TMPL_NAME} WITH template = template1;
    UPDATE pg_database SET datistemplate = TRUE WHERE datname = '${vars:TMPL_NAME}';
    CREATE EXTENSION hstore;
    EOF

    sudo -u postgres createlang plpgsql ${vars:TMPL_NAME}
    sudo -u postgres psql -q -d ${vars:TMPL_NAME} -f ${vars:PG_POSTGIS} || exit 1
    sudo -u postgres psql -q -d ${vars:TMPL_NAME} -f ${vars:PG_SPATIAL_REF} || exit 1

    cat << EOF | sudo -u postgres psql -d ${vars:TMPL_NAME}
    GRANT ALL ON geometry_columns TO PUBLIC;
    GRANT SELECT ON spatial_ref_sys TO PUBLIC;
    VACUUM FREEZE;
    EOF

[import]
#
#Processing: Node(135439k 64.0k/s) Way(16503k 4.91k/s) Relation(216040 72.79/s)  parse time: 8443s
#
#Node stats: total(135439673), max(2501075268) in 2115s
#Way stats: total(16503469), max(242650196) in 3360s
#Relation stats: total(216049), max(3279346) in 2968s
#
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    sudo -u postgres dropdb gis
    sudo -u postgres createdb -T ${vars:TMPL_NAME} gis

    rm ${vars:WORKDIR_OSM}/state.txt
    osmosis --read-replication-interval workingDirectory=${vars:WORKDIR_OSM} --write-xml-change -

    rm ${vars:PBF_FILE}
    wget ${vars:PBF_BASE_URL}${vars:PBF_FILE}
    sudo -u postgres osm2pgsql -d gis -s --hstore -S /usr/share/osm2pgsql/default.style -r pbf --cache-strategy sparse ${vars:PBF_FILE}
    sudo -u postgres psql -d gis -c "GRANT ALL ON SCHEMA public TO \"www-data\""
    sudo -u postgres psql -d gis -c "GRANT ALL ON ALL TABLES IN SCHEMA public TO \"www-data\""

    sudo -u postgres dropdb tiles
    sudo -u postgres createdb -T ${vars:TMPL_NAME} tiles
    sudo -u postgres psql -d tiles -c "create table tiles_geometries (id serial, name varchar)"
    sudo -u postgres psql -d tiles -c "select AddGeometryColumn('tiles_geometries', 'geom', 3857, 'POLYGON', 2)"
    sudo -u postgres psql -d tiles -c "grant all on tiles_geometries to \"www-data\""
    sudo -u postgres psql -d tiles -c "grant all on tiles_geometries_id_seq to \"www-data\""

[update]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds =
    rm -f ${vars:TMP_FOLDER}/changes.osc.gz
    osmosis --read-replication-interval workingDirectory=${vars:WORKDIR_OSM} --simplify-change --write-xml-change ${vars:TMP_FOLDER}/changes.osc.gz

    sudo -u postgres rm -f ${vars:TMP_FOLDER}/expire.tiles
    sudo -u postgres osm2pgsql -d gis -s --hstore -S /usr/share/osm2pgsql/default.style --cache-strategy sparse --append ${vars:TMP_FOLDER}/changes.osc.gz --expire-tiles 15-15 --expire-output ${vars:TMP_FOLDER}/expire.tiles

    ./buildout/bin/import_expiretiles --create --delete ${vars:TMP_FOLDER}/expires.tiles "user=www-data password=www-data dbname=tiles host=localhost" update
    sudo -u www-data ./buildout/bin/generate_tiles --config tilegeneration/config-update.yaml
